{"version":3,"sources":["components/pages/Dashboard/BasicExample.js","hooks/userOrderCount.js","components/pages/CustomHooks/CustomHooks.js","components/pages/Dashboard/Dashboard.js"],"names":["BasicExample","props","initialValues","name","onSubmit","values","actions","setTimeout","alert","JSON","stringify","setSubmitting","render","Modal","show","onHide","handleClose","Header","closeButton","Title","Body","type","onChange","handleChange","onBlur","handleBlur","value","user","Footer","Button","variant","onClick","useOrderCountHook","useState","orderCount","setOrderCount","incrementOrderCount","decrementOrderCount","CustomHooks","orderHook","className","Dashboard","title","setData","setShow","useEffect","a","axios","result","data","console","log","footer","label","icon","style","marginRight","faUserFriends","faDice","faBuilding","faHeadset","width","height"],"mappings":"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","file":"static/js/8.3dc051b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Formik } from 'formik';\r\nimport {Modal, Button} from 'react-bootstrap';\r\n\r\nexport const BasicExample = (props) => (\r\n  <div>\r\n    <h1>My Form</h1>\r\n    <Formik\r\n      initialValues={{ name: 'jared' }}\r\n      onSubmit={(values, actions) => {\r\n        setTimeout(() => {\r\n          alert(JSON.stringify(values, null, 2));\r\n          actions.setSubmitting(false);\r\n        }, 1000);\r\n      }}\r\n      render={() => (\r\n            <Modal show={props.show} onHide={props.handleClose}>\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>Modal heading</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={props.handleChange}\r\n                    onBlur={props.handleBlur}\r\n                    value={props.user}\r\n                />\r\n                {/* {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>} */}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.handleClose}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.handleClose}>\r\n                    Save Changes\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n      )}\r\n    />\r\n  </div>\r\n);\r\n","import { useState } from \"react\";\r\n\r\nfunction useOrderCountHook() {\r\n    const [orderCount, setOrderCount] = useState(0);\r\n\r\n    const incrementOrderCount = () => {\r\n        setOrderCount( orderCount + 1);\r\n    }\r\n    const decrementOrderCount = () => {\r\n        setOrderCount( orderCount - 1);\r\n    }\r\n\r\n    return { orderCount, incrementOrderCount , decrementOrderCount }\r\n}\r\n\r\nexport default useOrderCountHook;","import React from 'react';\r\nimport useOrderCountHook from '../../../hooks/userOrderCount';\r\n\r\nconst CustomHooks = (props) => {\r\n    const orderHook = useOrderCountHook();\r\n    return (\r\n      <div>\r\n        <h3>count:{orderHook.orderCount}</h3>\r\n        <button type='button' className=\"btn btn-primary mr-5\" onClick={orderHook.incrementOrderCount}>Increment</button>\r\n        <button type='button'className=\"btn btn-danger\" onClick={orderHook.decrementOrderCount}>Decrement</button>\r\n     </div>\r\n    );\r\n \r\n}\r\n\r\nexport default CustomHooks;\r\n","import React, { useState, Fragment, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport { faUserFriends, faDice, faBuilding, faHeadset } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Card } from 'primereact/card';\r\nimport { Button } from 'primereact/button';\r\nimport './Dashboard.scss';\r\n\r\nimport { BasicExample} from './BasicExample';\r\nimport CustomHooks from \"../CustomHooks/CustomHooks\";\r\n\r\nconst Dashboard = (props) => {\r\n\r\n    const [title, setTitle] = useState('Dashborad');\r\n    const [data, setData] = useState([]);\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [name, setName] = useState('');\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n    // /posts\t100 posts\r\n    // /comments\t500 comments\r\n    // /albums\t100 albums\r\n    // /photos\t5000 photos\r\n    // /todos\t200 todos\r\n    // /users\t10 users\r\n    useEffect(() => {\r\n        (async () => {\r\n            const result = await axios('https://jsonplaceholder.typicode.com/posts');\r\n            setData(result.data);\r\n            console.log(result);\r\n        })();\r\n    }, []);\r\n\r\n    const footer = <div>\r\n                <Button label=\"Save\" onClick={handleShow} icon=\"pi pi-check\" style={{marginRight: '.25em'}}/>\r\n                <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-secondary\"/>\r\n             </div>;\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"dashboard\">\r\n            <h1>{title}</h1>\r\n                <section className=\"card-container\">\r\n                    <div className=\"item\">\r\n                        <div className=\"flex-item\"><FontAwesomeIcon icon={faUserFriends} /></div>\r\n                        <div className=\"flex-item\">\r\n                            <p>Visitors</p>\r\n                            <p>1500</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <div className=\"flex-item\"><FontAwesomeIcon icon={faDice} /></div>\r\n                        <div className=\"flex-item\">\r\n                            <p>Shares</p>\r\n                            <p>12500</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <div className=\"flex-item\"><FontAwesomeIcon icon={faBuilding} /></div>\r\n                        <div className=\"flex-item\">\r\n                            <p>Network</p>\r\n                            <p>620</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <div className=\"flex-item\"><FontAwesomeIcon icon={faHeadset} /></div>\r\n                        <div className=\"flex-item\">\r\n                            <p>Files</p>\r\n                            <p>676</p>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"grid\">\r\n                    <div className=\"grid-item item1\">\r\n                        <Card title=\"Simple Card 1\" style={{ width: '100%', height: '100%' }} footer={footer}>\r\n                                For more straightforward sizing in CSS, we switch the global box-sizing value from content-box to border-box. This ensures padding does not affect the final computed width of an element, but it can cause problems with some third party software like Google Maps and Google Custom Search Engine.\r\n                                On the rare occasion you need to override it, use something like the following: For more straightforward sizing in CSS, we switch the global box-sizing value from content-box to border-box. This ensures padding does not affect the final computed width of an element, but it can cause problems with some third party software like Google Maps and Google Custom Search Engine.\r\n                                On the rare occasion you need to override it, use something like the following: For more straightforward sizing in CSS, we switch the global box-sizing value from content-box to border-box. This ensures padding does not affect the final computed width of an element, but it can cause problems with some third party software like Google Maps and Google Custom Search Engine.\r\n                                On the rare occasion you need to override it, use something like the following:\r\n\r\n                                {\r\n                                    show && \r\n                                    <BasicExample user={name} show={show} handleClose={handleClose} />\r\n                                }\r\n                        </Card>\r\n                    </div>\r\n                    <div className=\"grid-item item2\">\r\n                        <Card title=\"Simple Card 2\" style={{ width: '100%', height: '100%' }}>\r\n                            For more straightforward sizing in CSS, we switch the global box-sizing value from content-box to border-box. This ensures padding does not affect the final computed width of an element, but it can cause problems with some third party software like Google Maps and Google Custom Search Engine.\r\n                            On the rare occasion you need to override it, use something like the following:\r\n                        </Card>\r\n                    </div>\r\n                    <div className=\"grid-item item3\">\r\n                        <Card title=\"Simple Card 3\" style={{ width: '100%', height: '100%' }}>\r\n                            For more straightforward sizing in CSS, we switch the global box-sizing value from content-box to border-box. This ensures padding does not affect the final computed width of an element, but it can cause problems with some third party software like Google Maps and Google Custom Search Engine.\r\n                            On the rare occasion you need to override it, use something like the following:\r\n                            </Card>\r\n                    </div>\r\n                    <div className=\"grid-item item4\">\r\n                        <Card title=\"Simple Card 4\" style={{ width: '100%', height: '100%' }}>\r\n                            {/* For more straightforward sizing in CSS, we switch the global box-sizing value from content-box to border-box. This ensures padding does not affect the final computed width of an element, but it can cause problems with some third party software like Google Maps and Google Custom Search Engine.\r\n                            On the rare occasion you need to override it, use something like the following:For more straightforward sizing in CSS, we switch the global box-sizing value from content-box to border-box. This ensures padding does not affect the final computed width of an element, but it can cause problems with some third party software like Google Maps and Google Custom Search Engine.\r\n                            On the rare occasion you need to override it, use something like the following:use something like the following:For more straightforward sizing in CSS, we switch the global box-sizing value from content-box to border-box. This ensures padding does not affect the final computed width of an element, but it can cause problems with some third party software like Google Maps and Google Custom Search Engine.\r\n                            On the rare occasion you need to override it, use something like the following: */}\r\n                            <h2>Custom Hooks Example</h2>\r\n                            <CustomHooks/>\r\n                        </Card>\r\n                    </div>\r\n                    <div className=\"grid-item item5\">\r\n                        <Card title=\"Simple Card 5\" style={{ width: '100%', height: '100%' }}>\r\n                            For more straightforward sizing in CSS, we switch the global box-sizing value from content-box to border-box. This ensures padding does not affect the final computed width of an element, but it can cause problems with some third party software like Google Maps and Google Custom Search Engine.\r\n                            On the rare occasion you need to override it, use something like the following:For more straightforward sizing in CSS, we switch the global box-sizing value from content-box to border-box. This ensures padding does not affect the final computed width of an element, but it can cause problems with some third party software like Google Maps and Google Custom Search Engine.\r\n                            On the rare occasion you need to override it, use something like the following:\r\n                        </Card>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Dashboard;"],"sourceRoot":""}